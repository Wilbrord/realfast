import Head from "next/head";
import { useEffect,useState,useContext } from "react";
import { AppContext } from "@/settings/context/appContext";
import { useFormik } from "formik";
import * as yup from 'yup';



//create the validation schema/rules 
const filedSchema = yup.object().shape({
    firstName:yup.string().required('Hey,fill this field').min(2,'Please enter two or chars'),
    lastName:yup.string().required('Hey,fill this field').min(2,'Please enter two or chars'),
    phoneNo:yup.string().required().min(10).max(17),
    address:yup.string().required('hey fill this field').min(18),
    gender:yup.string().notOneOf(['not specified'])
})

export default function ProfileUpdate () {
    const [screenHeight,setScreenHeight] = useState (0);
    const {uid,email} = useContext(AppContext);

    
    useEffect(() => {
      setScreenHeight(window.innerHeight - 60);
    },[]);

    const { values,handleBlur,handleChange,errors,handleSubmit,touched } = useFormik({
        validationSchema:filedSchema,
        initialValues:{
            firstName:'',
            lastName:'',
            phoneNo:'',
            address:'',
            dob:'',
            gender:'', 
        },
        onSubmit:(values) => {
            console.log(values.firstName);

            //get filed values here and perform any operation
        }
        
    })

    return (
        <>
         <Head>
            <title>Talents Profile Update | Real Fast</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="/realfast_logo.png" />
        </Head>
        <main className={styles.container } styles={{minheight:`${screenHeight}px`}}>
        <div className={styles.wrapper}>
            <h2 className={styles.title}>Update your Profile {email == undefined ? null : email }</h2>

            <form onSubmit={handleSubmit}>
                <div className={styles.inputeBlockRow}>
                    <div className={styles.inputeBlock}>
                        <label className={styles.label}>first name</label>
                        <input
                        id="firstName"
                        type="text" 
                        placeholder="first and middlename" 
                        className={styles.inputeField}
                        value={values.firstName}
                        onChange={handleChange}
                        onBlur={handleBlur}>
                        {
                            errors.firstName && touched.firstName
                            ? <p className={styles.formError} style={{color:'red'}}>{errors.gender} </p>: null
                        }
                        </input>
                        
                        <p>error found hear</p>
                    </div>
                    <div className={styles.inputeBlock}>
                        <label className={styles.label}>last name</label>
                        <input
                        id="lastName"
                        type="text" 
                        placeholder="surname" 
                        className={styles.inputeField}
                        value={values.lastName}
                        onChange={handleChange}
                        onBlur={handleBlur}>
                        {
                            errors.lastName && touched.lastName
                            ? <p className={styles.formError} style={{color:'red'}}>{errors.gender} </p>: null
                        }
                        </input>
                    </div>
                </div>

                <div className={styles.inputeBlockMain}>
                        <label className={styles.label}>Phone number</label>
                        <input
                        type="text" 
                        id="phoneNo"
                        placeholder="phone number" 
                        className={styles.inputeField}
                        value={values.phoneNo}
                        onChange={handleChange}
                        onBlur={handleBlur}>
                        {
                            errors.phoneNo && touched.phoneNo
                            ? <p className={styles.formError} style={{color:'red'}}>{errors.gender} </p>: null
                        }
                        </input>
                </div>
                <div className={styles.inputeBlockMain}>
                        <label className={styles.label}>Address</label>
                        <input
                        type="text" 
                        id="address"
                        placeholder="contact address" 
                        className={styles.address}
                        value={values.firstName}
                        onChange={handleChange}
                        onBlur={handleBlur}>
                        {
                            errors.address && touched.address
                            ? <p className={styles.formError} style={{color:'red'}}>{errors.gender} </p>: null
                        }
                        </input>
                </div>

                <div className={styles.inputeBlockRow}>
                    <div className={styles.inputeBlock}>
                        <label className={styles.label}>Date of Birth</label>
                        <input
                        id="dob"
                        type="date" 
                        className={styles.inputeField}
                        value={values.dob}
                        onChange={handleChange}
                        onBlur={handleBlur}>
                        {
                            errors.dob && touched.dob
                            ? <p className={styles.formError} style={{color:'red'}}>{errors.gender} </p>: null
                        }
                        </input>
                    </div>
                    
                    <div className={styles.inputeBlock}>
                        <label className={styles.label}>gender</label>
                        <select 
                        className={styles.inputeField} 
                        id="gender"
                        value={values.gender}
                        onChange={handleChange}
                        onBlur={handleBlur}>
                            <option value='Not specified '>Not specifide</option>
                            <option value='Male'>Male</option>
                            <option value='Female'>Female</option>
                        </select>
                        {
                            errors.gender && touched.gender
                            ? <p className={styles.formError} style={{color:'red'}}>{errors.gender} </p>: null
                        }
                    </div>
                </div>
                <button type="submit" className={styles.submitBtn}>Update Profile</button>
            </form>
        </div>
        </main>
        </>
    )
}

const styles = {
    container:'w-full h-screen flex flex-col justify-center items-center px-16',
    wrapper:'w-full md:w-[720px] py-8',
    title:'text-lg text-center mb-4',
    inputeBlockRow:'w-full flex flex-col md:flex-row md:gap-3 md:mb-4',
    inputeBlock:'w-full mb-4',
    inputeBlockMain:'w-full mb-4',
    label:'text-gray-500 mb-2',
    inputeField:'w-full block border border-gray-200 py-5 px-4 rounded-full text-gray-500',
    submitBtn:'w-full bg-indigo-800 py-5 px-4 rounded-full text-lg text-white',

}