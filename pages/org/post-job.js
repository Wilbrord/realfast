import Head from "next/head";
import { useFormik } from "formik";
import * as yup from 'yup';
import { db } from "@/settings/firebase/firebase.setup";
import { collection,addDoc,doc,setDoc } from "firebase/firestore";



const fieldsSchema = yup.object().shape({
    jobTitle:yup.string().required('Requried').min(12),
    discription:yup.string().required('Required').min(200),
    requirements:yup.string().required('Required').min(1),
    wages:yup.number().required('Required').min(1),
    
});

export default function PostJob () {

    const handlFirestoreWriteDocument = async () => {
      await setDoc(doc(db,'jobs','info@earycode'),
        {
            title:values.jobTitle,
            desc:values.description,
            requirements:values.requirements,
            wages:values.wages,
            timestamp:new Date().getTime(),
            status:'active'
        })
            .then(() => {
                console.log('posted sucesfully');
            })
            .catch(error => console.log(error))
        }

    const { values,handleBlur,handleChange,errors,handleSubmit,touched } = useFormik({
        validationSchema:fieldsSchema,
        initialValues:{
            jobTitle:'',discription:'',requirements:'',wages:'', 
        },
        onSubmit:(values) => {
            handlFirestoreWriteDocument()
            // addDoc(collection(),(db,'jobs'),{
            //     title:values.jobTitle,
            //     desc:values.description,
            //     requirements:values.requirements,
            //     wages:values.wages,
            //     timestamp:new Date().getTime(),
            //     status:'active'
            // })
            // .then(() => {
            //     console.log('posted sucesfully');
            // })
            // .catch(error => console.log(error))
        },
    });

    return (
        <>
         <Head>
            <title>Post a job | Real Fast</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="/realfast_logo.png"/>
        </Head>
        <main className={styles.container }>
            <div className={styles.wrapper}> 
                <h1 className={styles.title}>Post a Job Vacancy</h1>
                    <form autoComplete="on" onSubmit={handleSubmit}>
                        <div className={styles.inputBlockMain}>
                            <label className={styles.label}>job Title/Position</label>
                            <input 
                            id="jobTitle"
                            type="email" 
                            placeholder="job title"
                            className={styles.inputField}
                            value={values.jobTitle}
                            onChange={handleChange}
                            onBlur={handleBlur}/>
                            {
                                errors.jobTitle && touched.jobTitle
                                ? <p className={styles.formError} style={{color:'red'}}>{errors.jobTitle}</p>
                                : null
                            }
                        </div>
                        <div className={styles.inputBlockMain}>
                            <label className={styles.label}>job Discription</label>
                            <textarea 
                            id="discription"
                            className={styles.inputField}
                            onChange={handleChange}
                            onBlur={handleBlur}
                            rows={10}
                            styles={{borderRadius:2}}>{values.description}</textarea>
                            {
                                errors.description && touched.discription
                                ? <p className={styles.formError} style={{color:'red'}}>{errors.discription}</p>
                                : null
                            }
                        </div>
                        <div className={styles.inputBlockMain}>
                            <label className={styles.label}>Wages/Salary</label>
                            <input 
                            id="wages"
                            type="number" 
                            placeholder="how much will the worker earn"
                            className={styles.inputField}
                            value={values.wages}
                            onChange={handleChange}
                            onBlur={handleBlur}/>
                            {
                                errors.wages && touched.wages
                                ? <p className={styles.formError} style={{color:'red'}}>{errors.wages}</p>
                                : null
                            }
                        </div>
                        <div className={styles.inputBlockMain}>
                            <label className={styles.label}>what are the requirements </label>
                            <textarea 
                            id="requirements"
                            className={styles.inputField}
                            onChange={handleChange}
                            onBlur={handleBlur}
                            rows={5}
                            styles={{borderRadius:10}}>{values.description}</textarea>
                            {
                                errors.requirements && touched.requirements
                                ? <p className={styles.formError} style={{color:'red'}}>{errors.requirements}</p>
                                : null
                            }
                        </div>
                        <button type="submit" className={styles.submitBtn}>Post Job</button>
                    </form>
                </div>    
        </main>
        </>
    )
}

const styles = {
    container:'w-full flex flex-col justify-center items-center px-16',
    wrapper:'w-full md:w-[720px] flex flex-col gap-16 py-8',
    title:'text-3xl text-center',
    inputBlockMain:'w-full mb-4',
    label:'text-gray-500 mb-2',
    inputField:'w-full block border border-gray-200 py-5 px-4 rounded-full',
    submitBtn:'w-full bg-indigo-800 py-5 px-4 rounded-full text-lg text-white',
    formError:'text-xs',
}